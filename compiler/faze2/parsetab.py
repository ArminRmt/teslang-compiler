
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftPRINTleftORleftANDleftNOTleftLESSLESSEQEQUALNOTEQUALGREATERGREATEREQleftADDSUBleftMODleftMULTDIVleftLBLOCKleftVECTORADD AND ASSIGN COLON COMMA DEF DIV ELSE EQUAL EXIT FOR GREATER GREATEREQ ID IF INT LBLOCK LBRACE LENGTH LESS LESSEQ LIST LPAREN MOD MULT NOT NOTEQUAL NULL OR PRINT QUESTIONMARK RBLOCK RBRACE RETURN RPAREN SCAN SEMI STRING SUB TO VAR VECTOR WHILE\n    prog : func prog\n         | empty\n    func : DEF type ID LPAREN flist RPAREN LBRACE body RBRACE\n    | DEF type ID LPAREN flist RPAREN RETURN expr SEMI\n    \n    body : stmt body\n         | empty\n    \n    stmt :    expr SEMI\n            | defvar SEMI\n            | if_statement\n            | ifelse_statement\n            | while_statement\n            | for_statement\n            | RETURN expr SEMI\n            | LBRACE body RBRACE\n            | func\n    if_statement : IF LPAREN expr RPAREN stmtifelse_statement : IF LPAREN expr RPAREN stmt ELSE stmtwhile_statement : WHILE LPAREN expr RPAREN stmtfor_statement : FOR LPAREN ID ASSIGN expr TO expr RPAREN stmt\n    defvar : VAR type ID\n           | VAR type ID ASSIGN expr\n    \n    flist :  type ID\n          |  type ID COMMA flist\n          | empty\n    \n    type : INT\n         | VECTOR\n         | NULL\n         | STRING\n    expr : expr QUESTIONMARK expr COLON expr\n    | ID LPAREN clist RPAREN\n    | ID LBLOCK expr RBLOCK ASSIGN expr\n    | expr LBLOCK expr RBLOCK\n    | LBLOCK clist RBLOCK\n    | expr ADD expr\n    | expr SUB expr\n    | expr MULT expr\n    | expr DIV expr\n    | expr MOD expr\n    | expr GREATER expr\n    | expr LESS expr\n    | expr EQUAL expr\n    | expr GREATEREQ expr\n    | expr LESSEQ expr\n    | expr NOTEQUAL expr\n    | expr OR expr\n    | expr AND expr\n    | ID ASSIGN expr\n    | NOT expr\n    | ADD expr\n    | SUB expr\n    | ID\n    | INT\n    | STRING\n    | builtin_methods\n    \n    clist : expr\n          | expr COMMA clist\n          | empty\n    empty :\n    builtin_methods : LENGTH LPAREN expr RPAREN\n                    | SCAN LPAREN RPAREN\n                    | PRINT LPAREN expr RPAREN\n                    | LIST LPAREN expr RPAREN\n                    | EXIT LPAREN expr RPAREN\n    '
    
_lr_action_items = {'DEF':([0,2,19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[4,4,4,4,4,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,4,4,-16,-18,4,-17,4,-19,]),'$end':([0,1,2,3,5,56,91,],[-58,0,-58,-2,-1,-3,-4,]),'INT':([4,12,18,19,20,23,25,29,30,31,32,33,34,35,36,37,38,42,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[7,7,7,39,39,39,39,-9,-10,-11,-12,39,-15,39,39,39,39,7,39,39,39,-3,-7,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-8,39,39,39,39,39,39,-4,-14,-13,39,39,39,39,39,39,39,-16,-18,39,39,-17,39,-19,]),'VECTOR':([4,12,18,42,],[8,8,8,8,]),'NULL':([4,12,18,42,],[9,9,9,9,]),'STRING':([4,12,18,19,20,23,25,29,30,31,32,33,34,35,36,37,38,42,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[10,10,10,40,40,40,40,-9,-10,-11,-12,40,-15,40,40,40,40,10,40,40,40,-3,-7,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-8,40,40,40,40,40,40,-4,-14,-13,40,40,40,40,40,40,40,-16,-18,40,40,-17,40,-19,]),'ID':([6,7,8,9,10,13,19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,85,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[11,-25,-26,-27,-28,16,22,22,22,22,-9,-10,-11,-12,22,-15,22,22,22,22,22,22,22,-3,-7,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-8,114,22,22,117,22,22,22,22,-4,-14,-13,22,22,22,22,22,22,22,-16,-18,22,22,-17,22,-19,]),'LPAREN':([11,22,43,44,45,46,47,48,49,50,],[12,52,83,84,85,86,87,88,89,90,]),'RPAREN':([12,14,15,16,18,21,22,39,40,41,52,77,78,79,80,81,87,92,94,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,115,116,118,119,120,121,122,123,126,127,132,133,134,135,137,142,146,],[-58,17,-24,-22,-58,-23,-51,-52,-53,-54,-58,-55,-57,-49,-50,-48,119,123,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-58,129,130,132,-60,133,134,135,-30,-32,-56,-59,-61,-62,-63,-29,-31,147,]),'COMMA':([16,22,39,40,41,77,79,80,81,94,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,126,132,133,134,135,137,142,],[18,-51,-52,-53,-54,113,-49,-50,-48,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-60,-30,-32,-59,-61,-62,-63,-29,-31,]),'LBRACE':([17,19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[19,23,23,23,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,23,23,-16,-18,23,-17,23,-19,]),'RETURN':([17,19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[20,33,33,33,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,33,33,-16,-18,33,-17,33,-19,]),'RBRACE':([19,23,24,25,26,29,30,31,32,34,55,56,57,58,74,91,95,111,139,140,145,148,],[-58,-58,56,-58,-6,-9,-10,-11,-12,-15,95,-3,-5,-7,-8,-4,-14,-13,-16,-18,-17,-19,]),'LBLOCK':([19,20,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,51,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,81,83,84,86,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,],[35,35,53,35,35,60,-9,-10,-11,-12,35,-15,35,35,35,35,-52,-53,-54,60,35,35,35,-3,-7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-8,60,60,60,60,60,35,35,35,35,35,35,-4,60,60,-14,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-13,-33,35,60,60,60,-60,60,60,60,-30,35,-32,35,35,35,35,-59,-61,-62,-63,35,60,60,-16,-18,60,60,35,35,-17,60,35,-19,]),'NOT':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[38,38,38,38,-9,-10,-11,-12,38,-15,38,38,38,38,38,38,38,-3,-7,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-8,38,38,38,38,38,38,-4,-14,-13,38,38,38,38,38,38,38,-16,-18,38,38,-17,38,-19,]),'ADD':([19,20,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,51,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,81,83,84,86,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,],[36,36,-51,36,36,61,-9,-10,-11,-12,36,-15,36,36,36,36,-52,-53,-54,61,36,36,36,-3,-7,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-8,61,61,-49,-50,61,36,36,36,36,36,36,-4,61,61,-14,61,61,-34,-35,-36,-37,-38,61,61,61,61,61,61,61,61,-13,-33,36,61,61,61,-60,61,61,61,-30,36,-32,36,36,36,36,-59,-61,-62,-63,36,61,61,-16,-18,61,61,36,36,-17,61,36,-19,]),'SUB':([19,20,22,23,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,51,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,81,83,84,86,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,],[37,37,-51,37,37,62,-9,-10,-11,-12,37,-15,37,37,37,37,-52,-53,-54,62,37,37,37,-3,-7,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-8,62,62,-49,-50,62,37,37,37,37,37,37,-4,62,62,-14,62,62,-34,-35,-36,-37,-38,62,62,62,62,62,62,62,62,-13,-33,37,62,62,62,-60,62,62,62,-30,37,-32,37,37,37,37,-59,-61,-62,-63,37,62,62,-16,-18,62,62,37,37,-17,62,37,-19,]),'VAR':([19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[42,42,42,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,42,42,-16,-18,42,-17,42,-19,]),'IF':([19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[43,43,43,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,43,43,-16,-18,43,-17,43,-19,]),'WHILE':([19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[44,44,44,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,44,44,-16,-18,44,-17,44,-19,]),'FOR':([19,23,25,29,30,31,32,34,56,58,74,91,95,111,129,130,139,140,143,145,147,148,],[45,45,45,-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,45,45,-16,-18,45,-17,45,-19,]),'LENGTH':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[46,46,46,46,-9,-10,-11,-12,46,-15,46,46,46,46,46,46,46,-3,-7,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-8,46,46,46,46,46,46,-4,-14,-13,46,46,46,46,46,46,46,-16,-18,46,46,-17,46,-19,]),'SCAN':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[47,47,47,47,-9,-10,-11,-12,47,-15,47,47,47,47,47,47,47,-3,-7,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-8,47,47,47,47,47,47,-4,-14,-13,47,47,47,47,47,47,47,-16,-18,47,47,-17,47,-19,]),'PRINT':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[48,48,48,48,-9,-10,-11,-12,48,-15,48,48,48,48,48,48,48,-3,-7,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-8,48,48,48,48,48,48,-4,-14,-13,48,48,48,48,48,48,48,-16,-18,48,48,-17,48,-19,]),'LIST':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[49,49,49,49,-9,-10,-11,-12,49,-15,49,49,49,49,49,49,49,-3,-7,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-8,49,49,49,49,49,49,-4,-14,-13,49,49,49,49,49,49,49,-16,-18,49,49,-17,49,-19,]),'EXIT':([19,20,23,25,29,30,31,32,33,34,35,36,37,38,52,53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,83,84,86,88,89,90,91,95,111,113,125,128,129,130,131,136,139,140,143,144,145,147,148,],[50,50,50,50,-9,-10,-11,-12,50,-15,50,50,50,50,50,50,50,-3,-7,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-8,50,50,50,50,50,50,-4,-14,-13,50,50,50,50,50,50,50,-16,-18,50,50,-17,50,-19,]),'ASSIGN':([22,114,117,124,],[54,128,131,136,]),'SEMI':([22,27,28,39,40,41,51,75,79,80,81,94,98,99,100,101,102,103,104,105,106,107,108,109,110,112,114,119,123,126,132,133,134,135,137,138,142,],[-51,58,74,-52,-53,-54,91,111,-49,-50,-48,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-20,-60,-30,-32,-59,-61,-62,-63,-29,-21,-31,]),'QUESTIONMARK':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,59,-52,-53,-54,59,59,59,-49,-50,-48,59,-47,59,59,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,59,59,59,-60,59,59,59,-30,-32,-59,-61,-62,-63,59,59,59,-31,59,]),'MULT':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,63,-52,-53,-54,63,63,63,63,63,63,63,63,63,63,63,63,-36,-37,63,63,63,63,63,63,63,63,63,-33,63,63,63,-60,63,63,63,-30,-32,-59,-61,-62,-63,63,63,63,63,63,]),'DIV':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,64,-52,-53,-54,64,64,64,64,64,64,64,64,64,64,64,64,-36,-37,64,64,64,64,64,64,64,64,64,-33,64,64,64,-60,64,64,64,-30,-32,-59,-61,-62,-63,64,64,64,64,64,]),'MOD':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,65,-52,-53,-54,65,65,65,65,65,65,65,65,65,65,65,65,-36,-37,-38,65,65,65,65,65,65,65,65,-33,65,65,65,-60,65,65,65,-30,-32,-59,-61,-62,-63,65,65,65,65,65,]),'GREATER':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,66,-52,-53,-54,66,66,66,-49,-50,66,66,66,66,66,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,66,66,-33,66,66,66,-60,66,66,66,-30,-32,-59,-61,-62,-63,66,66,66,66,66,]),'LESS':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,67,-52,-53,-54,67,67,67,-49,-50,67,67,67,67,67,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,67,67,-33,67,67,67,-60,67,67,67,-30,-32,-59,-61,-62,-63,67,67,67,67,67,]),'EQUAL':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,68,-52,-53,-54,68,68,68,-49,-50,68,68,68,68,68,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,68,68,-33,68,68,68,-60,68,68,68,-30,-32,-59,-61,-62,-63,68,68,68,68,68,]),'GREATEREQ':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,69,-52,-53,-54,69,69,69,-49,-50,69,69,69,69,69,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,69,69,-33,69,69,69,-60,69,69,69,-30,-32,-59,-61,-62,-63,69,69,69,69,69,]),'LESSEQ':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,70,-52,-53,-54,70,70,70,-49,-50,70,70,70,70,70,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,70,70,-33,70,70,70,-60,70,70,70,-30,-32,-59,-61,-62,-63,70,70,70,70,70,]),'NOTEQUAL':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,71,-52,-53,-54,71,71,71,-49,-50,71,71,71,71,71,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,71,71,-33,71,71,71,-60,71,71,71,-30,-32,-59,-61,-62,-63,71,71,71,71,71,]),'OR':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,72,-52,-53,-54,72,72,72,-49,-50,-48,72,72,72,72,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,72,72,72,-60,72,72,72,-30,-32,-59,-61,-62,-63,72,72,72,72,72,]),'AND':([22,27,39,40,41,51,75,77,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,118,119,120,121,122,123,126,132,133,134,135,137,138,141,142,146,],[-51,73,-52,-53,-54,73,73,73,-49,-50,-48,73,73,73,73,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,73,-46,-33,73,73,73,-60,73,73,73,-30,-32,-59,-61,-62,-63,73,73,73,73,73,]),'RBLOCK':([22,35,39,40,41,76,77,78,79,80,81,93,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,119,123,126,127,132,133,134,135,137,142,],[-51,-58,-52,-53,-54,112,-55,-57,-49,-50,-48,124,-47,126,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-58,-60,-30,-32,-56,-59,-61,-62,-63,-29,-31,]),'COLON':([22,39,40,41,79,80,81,94,96,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,126,132,133,134,135,137,142,],[-51,-52,-53,-54,-49,-50,-48,-47,125,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-60,-30,-32,-59,-61,-62,-63,-29,-31,]),'TO':([22,39,40,41,79,80,81,94,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,123,126,132,133,134,135,137,141,142,],[-51,-52,-53,-54,-49,-50,-48,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-33,-60,-30,-32,-59,-61,-62,-63,-29,144,-31,]),'ELSE':([29,30,31,32,34,56,58,74,91,95,111,139,140,145,148,],[-9,-10,-11,-12,-15,-3,-7,-8,-4,-14,-13,143,-18,-17,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,2,],[1,5,]),'func':([0,2,19,23,25,129,130,143,147,],[2,2,34,34,34,34,34,34,34,]),'empty':([0,2,12,18,19,23,25,35,52,113,],[3,3,15,15,26,26,26,78,78,78,]),'type':([4,12,18,42,],[6,13,13,82,]),'flist':([12,18,],[14,21,]),'body':([19,23,25,],[24,55,57,]),'stmt':([19,23,25,129,130,143,147,],[25,25,25,139,140,145,148,]),'expr':([19,20,23,25,33,35,36,37,38,52,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,84,86,88,89,90,113,125,128,129,130,131,136,143,144,147,],[27,51,27,27,75,77,79,80,81,77,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,118,120,121,122,77,137,138,27,27,141,142,27,146,27,]),'defvar':([19,23,25,129,130,143,147,],[28,28,28,28,28,28,28,]),'if_statement':([19,23,25,129,130,143,147,],[29,29,29,29,29,29,29,]),'ifelse_statement':([19,23,25,129,130,143,147,],[30,30,30,30,30,30,30,]),'while_statement':([19,23,25,129,130,143,147,],[31,31,31,31,31,31,31,]),'for_statement':([19,23,25,129,130,143,147,],[32,32,32,32,32,32,32,]),'builtin_methods':([19,20,23,25,33,35,36,37,38,52,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,84,86,88,89,90,113,125,128,129,130,131,136,143,144,147,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'clist':([35,52,113,],[76,92,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> func prog','prog',2,'p_prog','MyParser.py',22),
  ('prog -> empty','prog',1,'p_prog','MyParser.py',23),
  ('func -> DEF type ID LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func','MyParser.py',32),
  ('func -> DEF type ID LPAREN flist RPAREN RETURN expr SEMI','func',9,'p_func','MyParser.py',33),
  ('body -> stmt body','body',2,'p_body','MyParser.py',48),
  ('body -> empty','body',1,'p_body','MyParser.py',49),
  ('stmt -> expr SEMI','stmt',2,'p_stmt','MyParser.py',58),
  ('stmt -> defvar SEMI','stmt',2,'p_stmt','MyParser.py',59),
  ('stmt -> if_statement','stmt',1,'p_stmt','MyParser.py',60),
  ('stmt -> ifelse_statement','stmt',1,'p_stmt','MyParser.py',61),
  ('stmt -> while_statement','stmt',1,'p_stmt','MyParser.py',62),
  ('stmt -> for_statement','stmt',1,'p_stmt','MyParser.py',63),
  ('stmt -> RETURN expr SEMI','stmt',3,'p_stmt','MyParser.py',64),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt','MyParser.py',65),
  ('stmt -> func','stmt',1,'p_stmt','MyParser.py',66),
  ('if_statement -> IF LPAREN expr RPAREN stmt','if_statement',5,'p_if_statement','MyParser.py',89),
  ('ifelse_statement -> IF LPAREN expr RPAREN stmt ELSE stmt','ifelse_statement',7,'p_ifelse_statement','MyParser.py',94),
  ('while_statement -> WHILE LPAREN expr RPAREN stmt','while_statement',5,'p_while_statement','MyParser.py',99),
  ('for_statement -> FOR LPAREN ID ASSIGN expr TO expr RPAREN stmt','for_statement',9,'p_for_statement','MyParser.py',104),
  ('defvar -> VAR type ID','defvar',3,'p_defvar','MyParser.py',111),
  ('defvar -> VAR type ID ASSIGN expr','defvar',5,'p_defvar','MyParser.py',112),
  ('flist -> type ID','flist',2,'p_flist','MyParser.py',123),
  ('flist -> type ID COMMA flist','flist',4,'p_flist','MyParser.py',124),
  ('flist -> empty','flist',1,'p_flist','MyParser.py',125),
  ('type -> INT','type',1,'p_type','MyParser.py',149),
  ('type -> VECTOR','type',1,'p_type','MyParser.py',150),
  ('type -> NULL','type',1,'p_type','MyParser.py',151),
  ('type -> STRING','type',1,'p_type','MyParser.py',152),
  ('expr -> expr QUESTIONMARK expr COLON expr','expr',5,'p_expr','MyParser.py',174),
  ('expr -> ID LPAREN clist RPAREN','expr',4,'p_expr','MyParser.py',175),
  ('expr -> ID LBLOCK expr RBLOCK ASSIGN expr','expr',6,'p_expr','MyParser.py',176),
  ('expr -> expr LBLOCK expr RBLOCK','expr',4,'p_expr','MyParser.py',177),
  ('expr -> LBLOCK clist RBLOCK','expr',3,'p_expr','MyParser.py',178),
  ('expr -> expr ADD expr','expr',3,'p_expr','MyParser.py',179),
  ('expr -> expr SUB expr','expr',3,'p_expr','MyParser.py',180),
  ('expr -> expr MULT expr','expr',3,'p_expr','MyParser.py',181),
  ('expr -> expr DIV expr','expr',3,'p_expr','MyParser.py',182),
  ('expr -> expr MOD expr','expr',3,'p_expr','MyParser.py',183),
  ('expr -> expr GREATER expr','expr',3,'p_expr','MyParser.py',184),
  ('expr -> expr LESS expr','expr',3,'p_expr','MyParser.py',185),
  ('expr -> expr EQUAL expr','expr',3,'p_expr','MyParser.py',186),
  ('expr -> expr GREATEREQ expr','expr',3,'p_expr','MyParser.py',187),
  ('expr -> expr LESSEQ expr','expr',3,'p_expr','MyParser.py',188),
  ('expr -> expr NOTEQUAL expr','expr',3,'p_expr','MyParser.py',189),
  ('expr -> expr OR expr','expr',3,'p_expr','MyParser.py',190),
  ('expr -> expr AND expr','expr',3,'p_expr','MyParser.py',191),
  ('expr -> ID ASSIGN expr','expr',3,'p_expr','MyParser.py',192),
  ('expr -> NOT expr','expr',2,'p_expr','MyParser.py',193),
  ('expr -> ADD expr','expr',2,'p_expr','MyParser.py',194),
  ('expr -> SUB expr','expr',2,'p_expr','MyParser.py',195),
  ('expr -> ID','expr',1,'p_expr','MyParser.py',196),
  ('expr -> INT','expr',1,'p_expr','MyParser.py',197),
  ('expr -> STRING','expr',1,'p_expr','MyParser.py',198),
  ('expr -> builtin_methods','expr',1,'p_expr','MyParser.py',199),
  ('clist -> expr','clist',1,'p_clist','MyParser.py',259),
  ('clist -> expr COMMA clist','clist',3,'p_clist','MyParser.py',260),
  ('clist -> empty','clist',1,'p_clist','MyParser.py',261),
  ('empty -> <empty>','empty',0,'p_empty','MyParser.py',273),
  ('builtin_methods -> LENGTH LPAREN expr RPAREN','builtin_methods',4,'p_builtin_methods','MyParser.py',279),
  ('builtin_methods -> SCAN LPAREN RPAREN','builtin_methods',3,'p_builtin_methods','MyParser.py',280),
  ('builtin_methods -> PRINT LPAREN expr RPAREN','builtin_methods',4,'p_builtin_methods','MyParser.py',281),
  ('builtin_methods -> LIST LPAREN expr RPAREN','builtin_methods',4,'p_builtin_methods','MyParser.py',282),
  ('builtin_methods -> EXIT LPAREN expr RPAREN','builtin_methods',4,'p_builtin_methods','MyParser.py',283),
]
