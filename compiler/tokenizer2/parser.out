Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func prog
Rule 2     prog -> empty
Rule 3     func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
Rule 4     func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI
Rule 5     body -> <empty>
Rule 6     body -> stmt body
Rule 7     stmt -> expr SEMI
Rule 8     stmt -> defvar SEMI
Rule 9     stmt -> IF LPAREN expr RPAREN stmt
Rule 10    stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 11    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 12    stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
Rule 13    stmt -> RETURN expr SEMI
Rule 14    stmt -> LBRACE body RBRACE
Rule 15    stmt -> func
Rule 16    defvar -> VAR TYPE ID
Rule 17    defvar -> VAR TYPE ID ASSIGN expr
Rule 18    expr -> expr LBLOCK expr RBLOCK
Rule 19    expr -> LBLOCK clist RBLOCK
Rule 20    expr -> expr QUESTIONMARK expr COLON expr
Rule 21    expr -> expr ADD expr
Rule 22    expr -> expr SUB expr
Rule 23    expr -> expr MULT expr
Rule 24    expr -> expr DIV expr
Rule 25    expr -> expr MOD expr
Rule 26    expr -> expr GREATER expr
Rule 27    expr -> expr LESS expr
Rule 28    expr -> expr EQUAL expr
Rule 29    expr -> expr GREATEREQ expr
Rule 30    expr -> expr LESSEQ expr
Rule 31    expr -> expr NOTEQUAL expr
Rule 32    expr -> expr OR expr
Rule 33    expr -> expr AND expr
Rule 34    expr -> NOT expr
Rule 35    expr -> ADD expr
Rule 36    expr -> SUB expr
Rule 37    expr -> ID
Rule 38    expr -> ID ASSIGN expr
Rule 39    expr -> ID LPAREN clist RPAREN
Rule 40    expr -> INT
Rule 41    expr -> STRING
Rule 42    clist -> <empty>
Rule 43    clist -> expr
Rule 44    clist -> expr COMMA clist
Rule 45    flist -> <empty>
Rule 46    flist -> TYPE ID
Rule 47    flist -> TYPE ID COMMA flist
Rule 48    type -> INT
Rule 49    type -> VECTOR
Rule 50    type -> NULL
Rule 51    type -> STRING
Rule 52    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 21 35
AND                  : 33
ASSIGN               : 17 38
COLON                : 20
COMMA                : 44 47
DEF                  : 3 4
DIV                  : 24
ELSE                 : 10
EQUAL                : 12 28
FOR                  : 12
GREATER              : 26
GREATEREQ            : 29
ID                   : 3 4 12 16 17 37 38 39 46 47
IF                   : 9 10
INT                  : 40 48
LBLOCK               : 18 19
LBRACE               : 3 14
LESS                 : 27
LESSEQ               : 30
LPAREN               : 3 4 9 10 11 12 39
MOD                  : 25
MULT                 : 23
NOT                  : 34
NOTEQUAL             : 31
NULL                 : 50
OR                   : 32
PRINT                : 
QUESTIONMARK         : 20
RBLOCK               : 18 19
RBRACE               : 3 14
RETURN               : 4 13
RPAREN               : 3 4 9 10 11 12 39
SEMI                 : 4 7 8 13
STRING               : 41 51
SUB                  : 22 36
TO                   : 12
TYPE                 : 3 4 16 17 46 47
VAR                  : 16 17
VECTOR               : 49
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

body                 : 3 6 14
clist                : 19 39 44
defvar               : 8
empty                : 2
expr                 : 4 7 9 10 11 12 12 13 17 18 18 20 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 35 36 38 43 44
flist                : 3 4 47
func                 : 1 15
prog                 : 1 0
stmt                 : 6 9 10 10 11 12
type                 : 

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func prog
    (2) prog -> . empty
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI
    (52) empty -> .

    DEF             shift and go to state 4
    $end            reduce using rule 52 (empty -> .)

    prog                           shift and go to state 1
    func                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func . prog
    (1) prog -> . func prog
    (2) prog -> . empty
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI
    (52) empty -> .

    DEF             shift and go to state 4
    $end            reduce using rule 52 (empty -> .)

    func                           shift and go to state 2
    prog                           shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) prog -> empty .

    $end            reduce using rule 2 (prog -> empty .)


state 4

    (3) func -> DEF . TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF . TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    TYPE            shift and go to state 6


state 5

    (1) prog -> func prog .

    $end            reduce using rule 1 (prog -> func prog .)


state 6

    (3) func -> DEF TYPE . ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF TYPE . ID LPAREN flist RPAREN RETURN expr SEMI

    ID              shift and go to state 7


state 7

    (3) func -> DEF TYPE ID . LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF TYPE ID . LPAREN flist RPAREN RETURN expr SEMI

    LPAREN          shift and go to state 8


state 8

    (3) func -> DEF TYPE ID LPAREN . flist RPAREN LBRACE body RBRACE
    (4) func -> DEF TYPE ID LPAREN . flist RPAREN RETURN expr SEMI
    (45) flist -> .
    (46) flist -> . TYPE ID
    (47) flist -> . TYPE ID COMMA flist

    RPAREN          reduce using rule 45 (flist -> .)
    TYPE            shift and go to state 9

    flist                          shift and go to state 10

state 9

    (46) flist -> TYPE . ID
    (47) flist -> TYPE . ID COMMA flist

    ID              shift and go to state 11


state 10

    (3) func -> DEF TYPE ID LPAREN flist . RPAREN LBRACE body RBRACE
    (4) func -> DEF TYPE ID LPAREN flist . RPAREN RETURN expr SEMI

    RPAREN          shift and go to state 12


state 11

    (46) flist -> TYPE ID .
    (47) flist -> TYPE ID . COMMA flist

    RPAREN          reduce using rule 46 (flist -> TYPE ID .)
    COMMA           shift and go to state 13


state 12

    (3) func -> DEF TYPE ID LPAREN flist RPAREN . LBRACE body RBRACE
    (4) func -> DEF TYPE ID LPAREN flist RPAREN . RETURN expr SEMI

    LBRACE          shift and go to state 14
    RETURN          shift and go to state 15


state 13

    (47) flist -> TYPE ID COMMA . flist
    (45) flist -> .
    (46) flist -> . TYPE ID
    (47) flist -> . TYPE ID COMMA flist

    RPAREN          reduce using rule 45 (flist -> .)
    TYPE            shift and go to state 9

    flist                          shift and go to state 16

state 14

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE . body RBRACE
    (5) body -> .
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    RBRACE          reduce using rule 5 (body -> .)
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    body                           shift and go to state 19
    stmt                           shift and go to state 20
    expr                           shift and go to state 21
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 15

    (4) func -> DEF TYPE ID LPAREN flist RPAREN RETURN . expr SEMI
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 35

state 16

    (47) flist -> TYPE ID COMMA flist .

    RPAREN          reduce using rule 47 (flist -> TYPE ID COMMA flist .)


state 17

    (37) expr -> ID .
    (38) expr -> ID . ASSIGN expr
    (39) expr -> ID . LPAREN clist RPAREN

    SEMI            reduce using rule 37 (expr -> ID .)
    LBLOCK          reduce using rule 37 (expr -> ID .)
    QUESTIONMARK    reduce using rule 37 (expr -> ID .)
    ADD             reduce using rule 37 (expr -> ID .)
    SUB             reduce using rule 37 (expr -> ID .)
    MULT            reduce using rule 37 (expr -> ID .)
    DIV             reduce using rule 37 (expr -> ID .)
    MOD             reduce using rule 37 (expr -> ID .)
    GREATER         reduce using rule 37 (expr -> ID .)
    LESS            reduce using rule 37 (expr -> ID .)
    EQUAL           reduce using rule 37 (expr -> ID .)
    GREATEREQ       reduce using rule 37 (expr -> ID .)
    LESSEQ          reduce using rule 37 (expr -> ID .)
    NOTEQUAL        reduce using rule 37 (expr -> ID .)
    OR              reduce using rule 37 (expr -> ID .)
    AND             reduce using rule 37 (expr -> ID .)
    COMMA           reduce using rule 37 (expr -> ID .)
    RBLOCK          reduce using rule 37 (expr -> ID .)
    RPAREN          reduce using rule 37 (expr -> ID .)
    COLON           reduce using rule 37 (expr -> ID .)
    TO              reduce using rule 37 (expr -> ID .)
    ASSIGN          shift and go to state 36
    LPAREN          shift and go to state 37


state 18

    (14) stmt -> LBRACE . body RBRACE
    (5) body -> .
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    RBRACE          reduce using rule 5 (body -> .)
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    body                           shift and go to state 38
    stmt                           shift and go to state 20
    expr                           shift and go to state 21
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 19

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 39


state 20

    (6) body -> stmt . body
    (5) body -> .
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    RBRACE          reduce using rule 5 (body -> .)
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    stmt                           shift and go to state 20
    body                           shift and go to state 40
    expr                           shift and go to state 21
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 21

    (7) stmt -> expr . SEMI
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            shift and go to state 41
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 22

    (8) stmt -> defvar . SEMI

    SEMI            shift and go to state 57


state 23

    (9) stmt -> IF . LPAREN expr RPAREN stmt
    (10) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 58


state 24

    (11) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 59


state 25

    (12) stmt -> FOR . LPAREN ID EQUAL expr TO expr RPAREN stmt

    LPAREN          shift and go to state 60


state 26

    (13) stmt -> RETURN . expr SEMI
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 61

state 27

    (15) stmt -> func .

    IF              reduce using rule 15 (stmt -> func .)
    WHILE           reduce using rule 15 (stmt -> func .)
    FOR             reduce using rule 15 (stmt -> func .)
    RETURN          reduce using rule 15 (stmt -> func .)
    LBRACE          reduce using rule 15 (stmt -> func .)
    LBLOCK          reduce using rule 15 (stmt -> func .)
    NOT             reduce using rule 15 (stmt -> func .)
    ADD             reduce using rule 15 (stmt -> func .)
    SUB             reduce using rule 15 (stmt -> func .)
    ID              reduce using rule 15 (stmt -> func .)
    INT             reduce using rule 15 (stmt -> func .)
    STRING          reduce using rule 15 (stmt -> func .)
    VAR             reduce using rule 15 (stmt -> func .)
    DEF             reduce using rule 15 (stmt -> func .)
    RBRACE          reduce using rule 15 (stmt -> func .)
    ELSE            reduce using rule 15 (stmt -> func .)


state 28

    (19) expr -> LBLOCK . clist RBLOCK
    (42) clist -> .
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    RBLOCK          reduce using rule 42 (clist -> .)
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    clist                          shift and go to state 62
    expr                           shift and go to state 63

state 29

    (35) expr -> ADD . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 64

state 30

    (36) expr -> SUB . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 65

state 31

    (34) expr -> NOT . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 66

state 32

    (40) expr -> INT .

    SEMI            reduce using rule 40 (expr -> INT .)
    LBLOCK          reduce using rule 40 (expr -> INT .)
    QUESTIONMARK    reduce using rule 40 (expr -> INT .)
    ADD             reduce using rule 40 (expr -> INT .)
    SUB             reduce using rule 40 (expr -> INT .)
    MULT            reduce using rule 40 (expr -> INT .)
    DIV             reduce using rule 40 (expr -> INT .)
    MOD             reduce using rule 40 (expr -> INT .)
    GREATER         reduce using rule 40 (expr -> INT .)
    LESS            reduce using rule 40 (expr -> INT .)
    EQUAL           reduce using rule 40 (expr -> INT .)
    GREATEREQ       reduce using rule 40 (expr -> INT .)
    LESSEQ          reduce using rule 40 (expr -> INT .)
    NOTEQUAL        reduce using rule 40 (expr -> INT .)
    OR              reduce using rule 40 (expr -> INT .)
    AND             reduce using rule 40 (expr -> INT .)
    COMMA           reduce using rule 40 (expr -> INT .)
    RBLOCK          reduce using rule 40 (expr -> INT .)
    RPAREN          reduce using rule 40 (expr -> INT .)
    COLON           reduce using rule 40 (expr -> INT .)
    TO              reduce using rule 40 (expr -> INT .)


state 33

    (41) expr -> STRING .

    SEMI            reduce using rule 41 (expr -> STRING .)
    LBLOCK          reduce using rule 41 (expr -> STRING .)
    QUESTIONMARK    reduce using rule 41 (expr -> STRING .)
    ADD             reduce using rule 41 (expr -> STRING .)
    SUB             reduce using rule 41 (expr -> STRING .)
    MULT            reduce using rule 41 (expr -> STRING .)
    DIV             reduce using rule 41 (expr -> STRING .)
    MOD             reduce using rule 41 (expr -> STRING .)
    GREATER         reduce using rule 41 (expr -> STRING .)
    LESS            reduce using rule 41 (expr -> STRING .)
    EQUAL           reduce using rule 41 (expr -> STRING .)
    GREATEREQ       reduce using rule 41 (expr -> STRING .)
    LESSEQ          reduce using rule 41 (expr -> STRING .)
    NOTEQUAL        reduce using rule 41 (expr -> STRING .)
    OR              reduce using rule 41 (expr -> STRING .)
    AND             reduce using rule 41 (expr -> STRING .)
    COMMA           reduce using rule 41 (expr -> STRING .)
    RBLOCK          reduce using rule 41 (expr -> STRING .)
    RPAREN          reduce using rule 41 (expr -> STRING .)
    COLON           reduce using rule 41 (expr -> STRING .)
    TO              reduce using rule 41 (expr -> STRING .)


state 34

    (16) defvar -> VAR . TYPE ID
    (17) defvar -> VAR . TYPE ID ASSIGN expr

    TYPE            shift and go to state 67


state 35

    (4) func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr . SEMI
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            shift and go to state 68
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 36

    (38) expr -> ID ASSIGN . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 69

state 37

    (39) expr -> ID LPAREN . clist RPAREN
    (42) clist -> .
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    RPAREN          reduce using rule 42 (clist -> .)
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    clist                          shift and go to state 70
    expr                           shift and go to state 63

state 38

    (14) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 71


state 39

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    LBRACE          reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    LBLOCK          reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    NOT             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    ADD             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    SUB             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    ID              reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    INT             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    STRING          reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)


state 40

    (6) body -> stmt body .

    RBRACE          reduce using rule 6 (body -> stmt body .)


state 41

    (7) stmt -> expr SEMI .

    IF              reduce using rule 7 (stmt -> expr SEMI .)
    WHILE           reduce using rule 7 (stmt -> expr SEMI .)
    FOR             reduce using rule 7 (stmt -> expr SEMI .)
    RETURN          reduce using rule 7 (stmt -> expr SEMI .)
    LBRACE          reduce using rule 7 (stmt -> expr SEMI .)
    LBLOCK          reduce using rule 7 (stmt -> expr SEMI .)
    NOT             reduce using rule 7 (stmt -> expr SEMI .)
    ADD             reduce using rule 7 (stmt -> expr SEMI .)
    SUB             reduce using rule 7 (stmt -> expr SEMI .)
    ID              reduce using rule 7 (stmt -> expr SEMI .)
    INT             reduce using rule 7 (stmt -> expr SEMI .)
    STRING          reduce using rule 7 (stmt -> expr SEMI .)
    VAR             reduce using rule 7 (stmt -> expr SEMI .)
    DEF             reduce using rule 7 (stmt -> expr SEMI .)
    RBRACE          reduce using rule 7 (stmt -> expr SEMI .)
    ELSE            reduce using rule 7 (stmt -> expr SEMI .)


state 42

    (18) expr -> expr LBLOCK . expr RBLOCK
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 72

state 43

    (20) expr -> expr QUESTIONMARK . expr COLON expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 73

state 44

    (21) expr -> expr ADD . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 74

state 45

    (22) expr -> expr SUB . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 75

state 46

    (23) expr -> expr MULT . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 76

state 47

    (24) expr -> expr DIV . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 77

state 48

    (25) expr -> expr MOD . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 78

state 49

    (26) expr -> expr GREATER . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 79

state 50

    (27) expr -> expr LESS . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 80

state 51

    (28) expr -> expr EQUAL . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 81

state 52

    (29) expr -> expr GREATEREQ . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 82

state 53

    (30) expr -> expr LESSEQ . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 83

state 54

    (31) expr -> expr NOTEQUAL . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 84

state 55

    (32) expr -> expr OR . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 85

state 56

    (33) expr -> expr AND . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 86

state 57

    (8) stmt -> defvar SEMI .

    IF              reduce using rule 8 (stmt -> defvar SEMI .)
    WHILE           reduce using rule 8 (stmt -> defvar SEMI .)
    FOR             reduce using rule 8 (stmt -> defvar SEMI .)
    RETURN          reduce using rule 8 (stmt -> defvar SEMI .)
    LBRACE          reduce using rule 8 (stmt -> defvar SEMI .)
    LBLOCK          reduce using rule 8 (stmt -> defvar SEMI .)
    NOT             reduce using rule 8 (stmt -> defvar SEMI .)
    ADD             reduce using rule 8 (stmt -> defvar SEMI .)
    SUB             reduce using rule 8 (stmt -> defvar SEMI .)
    ID              reduce using rule 8 (stmt -> defvar SEMI .)
    INT             reduce using rule 8 (stmt -> defvar SEMI .)
    STRING          reduce using rule 8 (stmt -> defvar SEMI .)
    VAR             reduce using rule 8 (stmt -> defvar SEMI .)
    DEF             reduce using rule 8 (stmt -> defvar SEMI .)
    RBRACE          reduce using rule 8 (stmt -> defvar SEMI .)
    ELSE            reduce using rule 8 (stmt -> defvar SEMI .)


state 58

    (9) stmt -> IF LPAREN . expr RPAREN stmt
    (10) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 87

state 59

    (11) stmt -> WHILE LPAREN . expr RPAREN stmt
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 88

state 60

    (12) stmt -> FOR LPAREN . ID EQUAL expr TO expr RPAREN stmt

    ID              shift and go to state 89


state 61

    (13) stmt -> RETURN expr . SEMI
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            shift and go to state 90
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 62

    (19) expr -> LBLOCK clist . RBLOCK

    RBLOCK          shift and go to state 91


state 63

    (43) clist -> expr .
    (44) clist -> expr . COMMA clist
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    RBLOCK          reduce using rule 43 (clist -> expr .)
    RPAREN          reduce using rule 43 (clist -> expr .)
    COMMA           shift and go to state 92
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 64

    (35) expr -> ADD expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 35 (expr -> ADD expr .)
    QUESTIONMARK    reduce using rule 35 (expr -> ADD expr .)
    ADD             reduce using rule 35 (expr -> ADD expr .)
    SUB             reduce using rule 35 (expr -> ADD expr .)
    GREATER         reduce using rule 35 (expr -> ADD expr .)
    LESS            reduce using rule 35 (expr -> ADD expr .)
    EQUAL           reduce using rule 35 (expr -> ADD expr .)
    GREATEREQ       reduce using rule 35 (expr -> ADD expr .)
    LESSEQ          reduce using rule 35 (expr -> ADD expr .)
    NOTEQUAL        reduce using rule 35 (expr -> ADD expr .)
    OR              reduce using rule 35 (expr -> ADD expr .)
    AND             reduce using rule 35 (expr -> ADD expr .)
    COMMA           reduce using rule 35 (expr -> ADD expr .)
    RBLOCK          reduce using rule 35 (expr -> ADD expr .)
    RPAREN          reduce using rule 35 (expr -> ADD expr .)
    COLON           reduce using rule 35 (expr -> ADD expr .)
    TO              reduce using rule 35 (expr -> ADD expr .)
    LBLOCK          shift and go to state 42
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 35 (expr -> ADD expr .) ]
  ! MULT            [ reduce using rule 35 (expr -> ADD expr .) ]
  ! DIV             [ reduce using rule 35 (expr -> ADD expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> ADD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 65

    (36) expr -> SUB expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 36 (expr -> SUB expr .)
    QUESTIONMARK    reduce using rule 36 (expr -> SUB expr .)
    ADD             reduce using rule 36 (expr -> SUB expr .)
    SUB             reduce using rule 36 (expr -> SUB expr .)
    GREATER         reduce using rule 36 (expr -> SUB expr .)
    LESS            reduce using rule 36 (expr -> SUB expr .)
    EQUAL           reduce using rule 36 (expr -> SUB expr .)
    GREATEREQ       reduce using rule 36 (expr -> SUB expr .)
    LESSEQ          reduce using rule 36 (expr -> SUB expr .)
    NOTEQUAL        reduce using rule 36 (expr -> SUB expr .)
    OR              reduce using rule 36 (expr -> SUB expr .)
    AND             reduce using rule 36 (expr -> SUB expr .)
    COMMA           reduce using rule 36 (expr -> SUB expr .)
    RBLOCK          reduce using rule 36 (expr -> SUB expr .)
    RPAREN          reduce using rule 36 (expr -> SUB expr .)
    COLON           reduce using rule 36 (expr -> SUB expr .)
    TO              reduce using rule 36 (expr -> SUB expr .)
    LBLOCK          shift and go to state 42
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 36 (expr -> SUB expr .) ]
  ! MULT            [ reduce using rule 36 (expr -> SUB expr .) ]
  ! DIV             [ reduce using rule 36 (expr -> SUB expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> SUB expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 66

    (34) expr -> NOT expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 34 (expr -> NOT expr .)
    QUESTIONMARK    reduce using rule 34 (expr -> NOT expr .)
    OR              reduce using rule 34 (expr -> NOT expr .)
    AND             reduce using rule 34 (expr -> NOT expr .)
    COMMA           reduce using rule 34 (expr -> NOT expr .)
    RBLOCK          reduce using rule 34 (expr -> NOT expr .)
    RPAREN          reduce using rule 34 (expr -> NOT expr .)
    COLON           reduce using rule 34 (expr -> NOT expr .)
    TO              reduce using rule 34 (expr -> NOT expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54

  ! LBLOCK          [ reduce using rule 34 (expr -> NOT expr .) ]
  ! ADD             [ reduce using rule 34 (expr -> NOT expr .) ]
  ! SUB             [ reduce using rule 34 (expr -> NOT expr .) ]
  ! MULT            [ reduce using rule 34 (expr -> NOT expr .) ]
  ! DIV             [ reduce using rule 34 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> NOT expr .) ]
  ! GREATER         [ reduce using rule 34 (expr -> NOT expr .) ]
  ! LESS            [ reduce using rule 34 (expr -> NOT expr .) ]
  ! EQUAL           [ reduce using rule 34 (expr -> NOT expr .) ]
  ! GREATEREQ       [ reduce using rule 34 (expr -> NOT expr .) ]
  ! LESSEQ          [ reduce using rule 34 (expr -> NOT expr .) ]
  ! NOTEQUAL        [ reduce using rule 34 (expr -> NOT expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 67

    (16) defvar -> VAR TYPE . ID
    (17) defvar -> VAR TYPE . ID ASSIGN expr

    ID              shift and go to state 93


state 68

    (4) func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .

    DEF             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    $end            reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    IF              reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    WHILE           reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    FOR             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    RETURN          reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    LBRACE          reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    LBLOCK          reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    NOT             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    ADD             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    SUB             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    ID              reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    INT             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    STRING          reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    VAR             reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    RBRACE          reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)
    ELSE            reduce using rule 4 (func -> DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI .)


state 69

    (38) expr -> ID ASSIGN expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 38 (expr -> ID ASSIGN expr .)
    QUESTIONMARK    reduce using rule 38 (expr -> ID ASSIGN expr .)
    COMMA           reduce using rule 38 (expr -> ID ASSIGN expr .)
    RBLOCK          reduce using rule 38 (expr -> ID ASSIGN expr .)
    RPAREN          reduce using rule 38 (expr -> ID ASSIGN expr .)
    COLON           reduce using rule 38 (expr -> ID ASSIGN expr .)
    TO              reduce using rule 38 (expr -> ID ASSIGN expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56

  ! LBLOCK          [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! ADD             [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! SUB             [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! MULT            [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! GREATER         [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! LESS            [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! EQUAL           [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! GREATEREQ       [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! LESSEQ          [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! NOTEQUAL        [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! OR              [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! AND             [ reduce using rule 38 (expr -> ID ASSIGN expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]


state 70

    (39) expr -> ID LPAREN clist . RPAREN

    RPAREN          shift and go to state 94


state 71

    (14) stmt -> LBRACE body RBRACE .

    IF              reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    LBLOCK          reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    ADD             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    SUB             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    ID              reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    INT             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    STRING          reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 14 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 14 (stmt -> LBRACE body RBRACE .)


state 72

    (18) expr -> expr LBLOCK expr . RBLOCK
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    RBLOCK          shift and go to state 95
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 73

    (20) expr -> expr QUESTIONMARK expr . COLON expr
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    COLON           shift and go to state 96
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 74

    (21) expr -> expr ADD expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 21 (expr -> expr ADD expr .)
    QUESTIONMARK    reduce using rule 21 (expr -> expr ADD expr .)
    ADD             reduce using rule 21 (expr -> expr ADD expr .)
    SUB             reduce using rule 21 (expr -> expr ADD expr .)
    GREATER         reduce using rule 21 (expr -> expr ADD expr .)
    LESS            reduce using rule 21 (expr -> expr ADD expr .)
    EQUAL           reduce using rule 21 (expr -> expr ADD expr .)
    GREATEREQ       reduce using rule 21 (expr -> expr ADD expr .)
    LESSEQ          reduce using rule 21 (expr -> expr ADD expr .)
    NOTEQUAL        reduce using rule 21 (expr -> expr ADD expr .)
    OR              reduce using rule 21 (expr -> expr ADD expr .)
    AND             reduce using rule 21 (expr -> expr ADD expr .)
    COMMA           reduce using rule 21 (expr -> expr ADD expr .)
    RBLOCK          reduce using rule 21 (expr -> expr ADD expr .)
    RPAREN          reduce using rule 21 (expr -> expr ADD expr .)
    COLON           reduce using rule 21 (expr -> expr ADD expr .)
    TO              reduce using rule 21 (expr -> expr ADD expr .)
    LBLOCK          shift and go to state 42
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 21 (expr -> expr ADD expr .) ]
  ! MULT            [ reduce using rule 21 (expr -> expr ADD expr .) ]
  ! DIV             [ reduce using rule 21 (expr -> expr ADD expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr ADD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 75

    (22) expr -> expr SUB expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 22 (expr -> expr SUB expr .)
    QUESTIONMARK    reduce using rule 22 (expr -> expr SUB expr .)
    ADD             reduce using rule 22 (expr -> expr SUB expr .)
    SUB             reduce using rule 22 (expr -> expr SUB expr .)
    GREATER         reduce using rule 22 (expr -> expr SUB expr .)
    LESS            reduce using rule 22 (expr -> expr SUB expr .)
    EQUAL           reduce using rule 22 (expr -> expr SUB expr .)
    GREATEREQ       reduce using rule 22 (expr -> expr SUB expr .)
    LESSEQ          reduce using rule 22 (expr -> expr SUB expr .)
    NOTEQUAL        reduce using rule 22 (expr -> expr SUB expr .)
    OR              reduce using rule 22 (expr -> expr SUB expr .)
    AND             reduce using rule 22 (expr -> expr SUB expr .)
    COMMA           reduce using rule 22 (expr -> expr SUB expr .)
    RBLOCK          reduce using rule 22 (expr -> expr SUB expr .)
    RPAREN          reduce using rule 22 (expr -> expr SUB expr .)
    COLON           reduce using rule 22 (expr -> expr SUB expr .)
    TO              reduce using rule 22 (expr -> expr SUB expr .)
    LBLOCK          shift and go to state 42
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 22 (expr -> expr SUB expr .) ]
  ! MULT            [ reduce using rule 22 (expr -> expr SUB expr .) ]
  ! DIV             [ reduce using rule 22 (expr -> expr SUB expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr SUB expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 76

    (23) expr -> expr MULT expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 23 (expr -> expr MULT expr .)
    QUESTIONMARK    reduce using rule 23 (expr -> expr MULT expr .)
    ADD             reduce using rule 23 (expr -> expr MULT expr .)
    SUB             reduce using rule 23 (expr -> expr MULT expr .)
    MULT            reduce using rule 23 (expr -> expr MULT expr .)
    DIV             reduce using rule 23 (expr -> expr MULT expr .)
    MOD             reduce using rule 23 (expr -> expr MULT expr .)
    GREATER         reduce using rule 23 (expr -> expr MULT expr .)
    LESS            reduce using rule 23 (expr -> expr MULT expr .)
    EQUAL           reduce using rule 23 (expr -> expr MULT expr .)
    GREATEREQ       reduce using rule 23 (expr -> expr MULT expr .)
    LESSEQ          reduce using rule 23 (expr -> expr MULT expr .)
    NOTEQUAL        reduce using rule 23 (expr -> expr MULT expr .)
    OR              reduce using rule 23 (expr -> expr MULT expr .)
    AND             reduce using rule 23 (expr -> expr MULT expr .)
    COMMA           reduce using rule 23 (expr -> expr MULT expr .)
    RBLOCK          reduce using rule 23 (expr -> expr MULT expr .)
    RPAREN          reduce using rule 23 (expr -> expr MULT expr .)
    COLON           reduce using rule 23 (expr -> expr MULT expr .)
    TO              reduce using rule 23 (expr -> expr MULT expr .)
    LBLOCK          shift and go to state 42

  ! LBLOCK          [ reduce using rule 23 (expr -> expr MULT expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! MULT            [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 48 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 77

    (24) expr -> expr DIV expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 24 (expr -> expr DIV expr .)
    QUESTIONMARK    reduce using rule 24 (expr -> expr DIV expr .)
    ADD             reduce using rule 24 (expr -> expr DIV expr .)
    SUB             reduce using rule 24 (expr -> expr DIV expr .)
    MULT            reduce using rule 24 (expr -> expr DIV expr .)
    DIV             reduce using rule 24 (expr -> expr DIV expr .)
    MOD             reduce using rule 24 (expr -> expr DIV expr .)
    GREATER         reduce using rule 24 (expr -> expr DIV expr .)
    LESS            reduce using rule 24 (expr -> expr DIV expr .)
    EQUAL           reduce using rule 24 (expr -> expr DIV expr .)
    GREATEREQ       reduce using rule 24 (expr -> expr DIV expr .)
    LESSEQ          reduce using rule 24 (expr -> expr DIV expr .)
    NOTEQUAL        reduce using rule 24 (expr -> expr DIV expr .)
    OR              reduce using rule 24 (expr -> expr DIV expr .)
    AND             reduce using rule 24 (expr -> expr DIV expr .)
    COMMA           reduce using rule 24 (expr -> expr DIV expr .)
    RBLOCK          reduce using rule 24 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 24 (expr -> expr DIV expr .)
    COLON           reduce using rule 24 (expr -> expr DIV expr .)
    TO              reduce using rule 24 (expr -> expr DIV expr .)
    LBLOCK          shift and go to state 42

  ! LBLOCK          [ reduce using rule 24 (expr -> expr DIV expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! MULT            [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 48 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 78

    (25) expr -> expr MOD expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 25 (expr -> expr MOD expr .)
    QUESTIONMARK    reduce using rule 25 (expr -> expr MOD expr .)
    ADD             reduce using rule 25 (expr -> expr MOD expr .)
    SUB             reduce using rule 25 (expr -> expr MOD expr .)
    MOD             reduce using rule 25 (expr -> expr MOD expr .)
    GREATER         reduce using rule 25 (expr -> expr MOD expr .)
    LESS            reduce using rule 25 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 25 (expr -> expr MOD expr .)
    GREATEREQ       reduce using rule 25 (expr -> expr MOD expr .)
    LESSEQ          reduce using rule 25 (expr -> expr MOD expr .)
    NOTEQUAL        reduce using rule 25 (expr -> expr MOD expr .)
    OR              reduce using rule 25 (expr -> expr MOD expr .)
    AND             reduce using rule 25 (expr -> expr MOD expr .)
    COMMA           reduce using rule 25 (expr -> expr MOD expr .)
    RBLOCK          reduce using rule 25 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 25 (expr -> expr MOD expr .)
    COLON           reduce using rule 25 (expr -> expr MOD expr .)
    TO              reduce using rule 25 (expr -> expr MOD expr .)
    LBLOCK          shift and go to state 42
    MULT            shift and go to state 46
    DIV             shift and go to state 47

  ! LBLOCK          [ reduce using rule 25 (expr -> expr MOD expr .) ]
  ! MULT            [ reduce using rule 25 (expr -> expr MOD expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr MOD expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! ADD             [ shift and go to state 44 ]
  ! SUB             [ shift and go to state 45 ]
  ! MOD             [ shift and go to state 48 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 79

    (26) expr -> expr GREATER expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 26 (expr -> expr GREATER expr .)
    QUESTIONMARK    reduce using rule 26 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 26 (expr -> expr GREATER expr .)
    LESS            reduce using rule 26 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 26 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 26 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 26 (expr -> expr GREATER expr .)
    NOTEQUAL        reduce using rule 26 (expr -> expr GREATER expr .)
    OR              reduce using rule 26 (expr -> expr GREATER expr .)
    AND             reduce using rule 26 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 26 (expr -> expr GREATER expr .)
    RBLOCK          reduce using rule 26 (expr -> expr GREATER expr .)
    RPAREN          reduce using rule 26 (expr -> expr GREATER expr .)
    COLON           reduce using rule 26 (expr -> expr GREATER expr .)
    TO              reduce using rule 26 (expr -> expr GREATER expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! ADD             [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! SUB             [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! MULT            [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr GREATER expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 80

    (27) expr -> expr LESS expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 27 (expr -> expr LESS expr .)
    QUESTIONMARK    reduce using rule 27 (expr -> expr LESS expr .)
    GREATER         reduce using rule 27 (expr -> expr LESS expr .)
    LESS            reduce using rule 27 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 27 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 27 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 27 (expr -> expr LESS expr .)
    NOTEQUAL        reduce using rule 27 (expr -> expr LESS expr .)
    OR              reduce using rule 27 (expr -> expr LESS expr .)
    AND             reduce using rule 27 (expr -> expr LESS expr .)
    COMMA           reduce using rule 27 (expr -> expr LESS expr .)
    RBLOCK          reduce using rule 27 (expr -> expr LESS expr .)
    RPAREN          reduce using rule 27 (expr -> expr LESS expr .)
    COLON           reduce using rule 27 (expr -> expr LESS expr .)
    TO              reduce using rule 27 (expr -> expr LESS expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! ADD             [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! SUB             [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! MULT            [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr LESS expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 81

    (28) expr -> expr EQUAL expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 28 (expr -> expr EQUAL expr .)
    QUESTIONMARK    reduce using rule 28 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 28 (expr -> expr EQUAL expr .)
    LESS            reduce using rule 28 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 28 (expr -> expr EQUAL expr .)
    GREATEREQ       reduce using rule 28 (expr -> expr EQUAL expr .)
    LESSEQ          reduce using rule 28 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 28 (expr -> expr EQUAL expr .)
    OR              reduce using rule 28 (expr -> expr EQUAL expr .)
    AND             reduce using rule 28 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 28 (expr -> expr EQUAL expr .)
    RBLOCK          reduce using rule 28 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 28 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 28 (expr -> expr EQUAL expr .)
    TO              reduce using rule 28 (expr -> expr EQUAL expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! ADD             [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! SUB             [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! MULT            [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! DIV             [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr EQUAL expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 82

    (29) expr -> expr GREATEREQ expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 29 (expr -> expr GREATEREQ expr .)
    QUESTIONMARK    reduce using rule 29 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 29 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 29 (expr -> expr GREATEREQ expr .)
    EQUAL           reduce using rule 29 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 29 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 29 (expr -> expr GREATEREQ expr .)
    NOTEQUAL        reduce using rule 29 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 29 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 29 (expr -> expr GREATEREQ expr .)
    COMMA           reduce using rule 29 (expr -> expr GREATEREQ expr .)
    RBLOCK          reduce using rule 29 (expr -> expr GREATEREQ expr .)
    RPAREN          reduce using rule 29 (expr -> expr GREATEREQ expr .)
    COLON           reduce using rule 29 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 29 (expr -> expr GREATEREQ expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! ADD             [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! SUB             [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! MULT            [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr GREATEREQ expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 83

    (30) expr -> expr LESSEQ expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 30 (expr -> expr LESSEQ expr .)
    QUESTIONMARK    reduce using rule 30 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 30 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 30 (expr -> expr LESSEQ expr .)
    EQUAL           reduce using rule 30 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 30 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 30 (expr -> expr LESSEQ expr .)
    NOTEQUAL        reduce using rule 30 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 30 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 30 (expr -> expr LESSEQ expr .)
    COMMA           reduce using rule 30 (expr -> expr LESSEQ expr .)
    RBLOCK          reduce using rule 30 (expr -> expr LESSEQ expr .)
    RPAREN          reduce using rule 30 (expr -> expr LESSEQ expr .)
    COLON           reduce using rule 30 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 30 (expr -> expr LESSEQ expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! ADD             [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! SUB             [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! MULT            [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! DIV             [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr LESSEQ expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 84

    (31) expr -> expr NOTEQUAL expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    QUESTIONMARK    reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    GREATER         reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    LESS            reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    GREATEREQ       reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    LESSEQ          reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    OR              reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    AND             reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    RBLOCK          reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    RPAREN          reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    COLON           reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    TO              reduce using rule 31 (expr -> expr NOTEQUAL expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48

  ! LBLOCK          [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! ADD             [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! SUB             [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! MULT            [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! DIV             [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr NOTEQUAL expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 50 ]
  ! EQUAL           [ shift and go to state 51 ]
  ! GREATEREQ       [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 85

    (32) expr -> expr OR expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 32 (expr -> expr OR expr .)
    QUESTIONMARK    reduce using rule 32 (expr -> expr OR expr .)
    OR              reduce using rule 32 (expr -> expr OR expr .)
    COMMA           reduce using rule 32 (expr -> expr OR expr .)
    RBLOCK          reduce using rule 32 (expr -> expr OR expr .)
    RPAREN          reduce using rule 32 (expr -> expr OR expr .)
    COLON           reduce using rule 32 (expr -> expr OR expr .)
    TO              reduce using rule 32 (expr -> expr OR expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    AND             shift and go to state 56

  ! LBLOCK          [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! ADD             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! SUB             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! MULT            [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! LESS            [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! GREATEREQ       [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! LESSEQ          [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! NOTEQUAL        [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 32 (expr -> expr OR expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! OR              [ shift and go to state 55 ]


state 86

    (33) expr -> expr AND expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 33 (expr -> expr AND expr .)
    QUESTIONMARK    reduce using rule 33 (expr -> expr AND expr .)
    OR              reduce using rule 33 (expr -> expr AND expr .)
    AND             reduce using rule 33 (expr -> expr AND expr .)
    COMMA           reduce using rule 33 (expr -> expr AND expr .)
    RBLOCK          reduce using rule 33 (expr -> expr AND expr .)
    RPAREN          reduce using rule 33 (expr -> expr AND expr .)
    COLON           reduce using rule 33 (expr -> expr AND expr .)
    TO              reduce using rule 33 (expr -> expr AND expr .)
    LBLOCK          shift and go to state 42
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54

  ! LBLOCK          [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! ADD             [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! SUB             [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! MULT            [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! LESS            [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! GREATEREQ       [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! LESSEQ          [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! NOTEQUAL        [ reduce using rule 33 (expr -> expr AND expr .) ]
  ! QUESTIONMARK    [ shift and go to state 43 ]
  ! OR              [ shift and go to state 55 ]
  ! AND             [ shift and go to state 56 ]


state 87

    (9) stmt -> IF LPAREN expr . RPAREN stmt
    (10) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    RPAREN          shift and go to state 97
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 88

    (11) stmt -> WHILE LPAREN expr . RPAREN stmt
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    RPAREN          shift and go to state 98
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 89

    (12) stmt -> FOR LPAREN ID . EQUAL expr TO expr RPAREN stmt

    EQUAL           shift and go to state 99


state 90

    (13) stmt -> RETURN expr SEMI .

    IF              reduce using rule 13 (stmt -> RETURN expr SEMI .)
    WHILE           reduce using rule 13 (stmt -> RETURN expr SEMI .)
    FOR             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    RETURN          reduce using rule 13 (stmt -> RETURN expr SEMI .)
    LBRACE          reduce using rule 13 (stmt -> RETURN expr SEMI .)
    LBLOCK          reduce using rule 13 (stmt -> RETURN expr SEMI .)
    NOT             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    ADD             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    SUB             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    ID              reduce using rule 13 (stmt -> RETURN expr SEMI .)
    INT             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    STRING          reduce using rule 13 (stmt -> RETURN expr SEMI .)
    VAR             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    DEF             reduce using rule 13 (stmt -> RETURN expr SEMI .)
    RBRACE          reduce using rule 13 (stmt -> RETURN expr SEMI .)
    ELSE            reduce using rule 13 (stmt -> RETURN expr SEMI .)


state 91

    (19) expr -> LBLOCK clist RBLOCK .

    SEMI            reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    LBLOCK          reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    QUESTIONMARK    reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    ADD             reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    SUB             reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    MULT            reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    DIV             reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    MOD             reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    GREATER         reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    LESS            reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    EQUAL           reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    GREATEREQ       reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    LESSEQ          reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    NOTEQUAL        reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    OR              reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    AND             reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    COMMA           reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    RBLOCK          reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    RPAREN          reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    COLON           reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)
    TO              reduce using rule 19 (expr -> LBLOCK clist RBLOCK .)


state 92

    (44) clist -> expr COMMA . clist
    (42) clist -> .
    (43) clist -> . expr
    (44) clist -> . expr COMMA clist
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    RBLOCK          reduce using rule 42 (clist -> .)
    RPAREN          reduce using rule 42 (clist -> .)
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 63
    clist                          shift and go to state 100

state 93

    (16) defvar -> VAR TYPE ID .
    (17) defvar -> VAR TYPE ID . ASSIGN expr

    SEMI            reduce using rule 16 (defvar -> VAR TYPE ID .)
    ASSIGN          shift and go to state 101


state 94

    (39) expr -> ID LPAREN clist RPAREN .

    SEMI            reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    LBLOCK          reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    QUESTIONMARK    reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    ADD             reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    SUB             reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    MULT            reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    DIV             reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    MOD             reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    GREATER         reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    LESS            reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    EQUAL           reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    GREATEREQ       reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    LESSEQ          reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    NOTEQUAL        reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    OR              reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    AND             reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    COMMA           reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    RBLOCK          reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    RPAREN          reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    COLON           reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)
    TO              reduce using rule 39 (expr -> ID LPAREN clist RPAREN .)


state 95

    (18) expr -> expr LBLOCK expr RBLOCK .

    SEMI            reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    LBLOCK          reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    QUESTIONMARK    reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    ADD             reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    SUB             reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    MULT            reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    DIV             reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    MOD             reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    GREATER         reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    LESS            reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    EQUAL           reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    GREATEREQ       reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    LESSEQ          reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    NOTEQUAL        reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    OR              reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    AND             reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    COMMA           reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    RBLOCK          reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    RPAREN          reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    COLON           reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)
    TO              reduce using rule 18 (expr -> expr LBLOCK expr RBLOCK .)


state 96

    (20) expr -> expr QUESTIONMARK expr COLON . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 102

state 97

    (9) stmt -> IF LPAREN expr RPAREN . stmt
    (10) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    expr                           shift and go to state 21
    stmt                           shift and go to state 103
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 98

    (11) stmt -> WHILE LPAREN expr RPAREN . stmt
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    expr                           shift and go to state 21
    stmt                           shift and go to state 104
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 99

    (12) stmt -> FOR LPAREN ID EQUAL . expr TO expr RPAREN stmt
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 105

state 100

    (44) clist -> expr COMMA clist .

    RBLOCK          reduce using rule 44 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 44 (clist -> expr COMMA clist .)


state 101

    (17) defvar -> VAR TYPE ID ASSIGN . expr
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 106

state 102

    (20) expr -> expr QUESTIONMARK expr COLON expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for QUESTIONMARK resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI            reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    COMMA           reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    RBLOCK          reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    RPAREN          reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    COLON           reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    TO              reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .)
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56

  ! LBLOCK          [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! QUESTIONMARK    [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! ADD             [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! SUB             [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MULT            [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! GREATER         [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! LESS            [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! GREATEREQ       [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! LESSEQ          [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr QUESTIONMARK expr COLON expr .) ]


state 103

    (9) stmt -> IF LPAREN expr RPAREN stmt .
    (10) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBLOCK          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    ADD             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    SUB             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    INT             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 107

  ! ELSE            [ reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 104

    (11) stmt -> WHILE LPAREN expr RPAREN stmt .

    IF              reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBLOCK          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ADD             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    SUB             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    INT             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 11 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 105

    (12) stmt -> FOR LPAREN ID EQUAL expr . TO expr RPAREN stmt
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    TO              shift and go to state 108
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 106

    (17) defvar -> VAR TYPE ID ASSIGN expr .
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    SEMI            reduce using rule 17 (defvar -> VAR TYPE ID ASSIGN expr .)
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 107

    (10) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    expr                           shift and go to state 21
    stmt                           shift and go to state 109
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 108

    (12) stmt -> FOR LPAREN ID EQUAL expr TO . expr RPAREN stmt
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING

    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33

    expr                           shift and go to state 110

state 109

    (10) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    IF              reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBLOCK          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NOT             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ADD             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    SUB             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ID              reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    INT             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    VAR             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    DEF             reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 10 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 110

    (12) stmt -> FOR LPAREN ID EQUAL expr TO expr . RPAREN stmt
    (18) expr -> expr . LBLOCK expr RBLOCK
    (20) expr -> expr . QUESTIONMARK expr COLON expr
    (21) expr -> expr . ADD expr
    (22) expr -> expr . SUB expr
    (23) expr -> expr . MULT expr
    (24) expr -> expr . DIV expr
    (25) expr -> expr . MOD expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . LESS expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . GREATEREQ expr
    (30) expr -> expr . LESSEQ expr
    (31) expr -> expr . NOTEQUAL expr
    (32) expr -> expr . OR expr
    (33) expr -> expr . AND expr

    RPAREN          shift and go to state 111
    LBLOCK          shift and go to state 42
    QUESTIONMARK    shift and go to state 43
    ADD             shift and go to state 44
    SUB             shift and go to state 45
    MULT            shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    GREATER         shift and go to state 49
    LESS            shift and go to state 50
    EQUAL           shift and go to state 51
    GREATEREQ       shift and go to state 52
    LESSEQ          shift and go to state 53
    NOTEQUAL        shift and go to state 54
    OR              shift and go to state 55
    AND             shift and go to state 56


state 111

    (12) stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN . stmt
    (7) stmt -> . expr SEMI
    (8) stmt -> . defvar SEMI
    (9) stmt -> . IF LPAREN expr RPAREN stmt
    (10) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (11) stmt -> . WHILE LPAREN expr RPAREN stmt
    (12) stmt -> . FOR LPAREN ID EQUAL expr TO expr RPAREN stmt
    (13) stmt -> . RETURN expr SEMI
    (14) stmt -> . LBRACE body RBRACE
    (15) stmt -> . func
    (18) expr -> . expr LBLOCK expr RBLOCK
    (19) expr -> . LBLOCK clist RBLOCK
    (20) expr -> . expr QUESTIONMARK expr COLON expr
    (21) expr -> . expr ADD expr
    (22) expr -> . expr SUB expr
    (23) expr -> . expr MULT expr
    (24) expr -> . expr DIV expr
    (25) expr -> . expr MOD expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr LESS expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr GREATEREQ expr
    (30) expr -> . expr LESSEQ expr
    (31) expr -> . expr NOTEQUAL expr
    (32) expr -> . expr OR expr
    (33) expr -> . expr AND expr
    (34) expr -> . NOT expr
    (35) expr -> . ADD expr
    (36) expr -> . SUB expr
    (37) expr -> . ID
    (38) expr -> . ID ASSIGN expr
    (39) expr -> . ID LPAREN clist RPAREN
    (40) expr -> . INT
    (41) expr -> . STRING
    (16) defvar -> . VAR TYPE ID
    (17) defvar -> . VAR TYPE ID ASSIGN expr
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF TYPE ID LPAREN flist RPAREN RETURN expr SEMI

    IF              shift and go to state 23
    WHILE           shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    LBRACE          shift and go to state 18
    LBLOCK          shift and go to state 28
    NOT             shift and go to state 31
    ADD             shift and go to state 29
    SUB             shift and go to state 30
    ID              shift and go to state 17
    INT             shift and go to state 32
    STRING          shift and go to state 33
    VAR             shift and go to state 34
    DEF             shift and go to state 4

    expr                           shift and go to state 21
    stmt                           shift and go to state 112
    defvar                         shift and go to state 22
    func                           shift and go to state 27

state 112

    (12) stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .

    IF              reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    FOR             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    LBLOCK          reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    NOT             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    ADD             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    SUB             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    ID              reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    INT             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    STRING          reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    VAR             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    DEF             reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 12 (stmt -> FOR LPAREN ID EQUAL expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBLOCK in state 102 resolved as shift
WARNING: shift/reduce conflict for QUESTIONMARK in state 102 resolved as shift
WARNING: shift/reduce conflict for ADD in state 102 resolved as shift
WARNING: shift/reduce conflict for SUB in state 102 resolved as shift
WARNING: shift/reduce conflict for MULT in state 102 resolved as shift
WARNING: shift/reduce conflict for DIV in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 103 resolved as shift
